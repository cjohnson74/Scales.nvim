
The Dynamic Programming Scale Book

The Universal DP Pattern

All DP solutions follow this fundamental structure:

```python
def solve_dp(input):
    # 1. Define state representation: What does dp[i] or dp[i][j] mean?
    
    # 2. Initialize DP array with base cases
    dp = initialize_with_base_cases()
    
    # 3. Fill DP array in dependency order
    for i in range(proper_order):
        dp[i] = calculate_from_previous_states()
    
    # 4. Return final answer
    return extract_answer_from_dp()
```

# Scale 1: Linear Sequence DP
State Definition: `dp[i]` typically represents the optimal answer ending at or considering up to index i.

Pattern 1.1: Maximum Subarray (Kadane's)
- State: `dp[i]` = maximum sum subarray ending at index i
- Transition: `dp[i] = max(nums[i], dp[i-1] + nums[i])`
- Base Case: `dp[0] = nums[0]`
- Answer: `max(dp)`

Pattern 1.2: Longest Increasing Subsequence
- State: `dp[i]` = length of LIS ending at index i
- Transition: `dp[i] = max(dp[j] + 1)` for all j < i where nums[j] < nums[i]
- Base Case: `dp[i] = 1` for all i (single element)
- Answer: `max(dp)`

Pattern 1.3: House Robber (Non-adjacent Elements)
- State: `dp[i]` = maximum value up to index i
- Transition: `dp[i] = max(dp[i-1], dp[i-2] + nums[i])`
- Base Case: `dp[0] = nums[0], dp[1] = max(nums[0], nums[1])`
- Answer: `dp[n-1]`

# Scale 2: Two Sequence DP

State Definition: `dp[i][j]` typically represents the optimal answer considering first i elements of sequence 1 and first j elements of sequence 2.

Pattern 2.1: Longest Common Subsequence
- State: `dp[i][j]` = length of LCS between first i chars of s1 and first j chars of s2
- Transition: 
  - If `s1[i-1] == s2[j-1]`: `dp[i][j] = dp[i-1][j-1] + 1`
  - Else: `dp[i][j] = max(dp[i-1][j], dp[i][j-1])`
- Base Case: `dp[0][j] = dp[i][0] = 0`
- Answer: `dp[m][n]`

Pattern 2.2: Edit Distance
- State: `dp[i][j]` = min operations to convert first i chars of s1 to first j chars of s2
- Transition: 
  - If `s1[i-1] == s2[j-1]`: `dp[i][j] = dp[i-1][j-1]`
  - Else: `dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])`
- Base Case: `dp[i][0] = i, dp[0][j] = j`
- Answer: `dp[m][n]`

# Scale 3: Grid DP

State Definition: `dp[i][j]` represents the optimal answer for reaching or considering the cell at position (i,j).

Pattern 3.1: Minimum/Maximum Path Sum
- State: `dp[i][j]` = min/max path sum to reach cell (i,j)
- Transition: `dp[i][j] = grid[i][j] + min/max(dp[i-1][j], dp[i][j-1])`
- Base Cases: 
  - `dp[0][0] = grid[0][0]`
  - First row: `dp[0][j] = dp[0][j-1] + grid[0][j]`
  - First col: `dp[i][0] = dp[i-1][0] + grid[i][0]`
- Answer: `dp[m-1][n-1]`

Pattern 3.2: Unique Paths
- State: `dp[i][j]` = number of ways to reach cell (i,j)
- Transition: `dp[i][j] = dp[i-1][j] + dp[i][j-1]`
- Base Cases: 
  - First row: `dp[0][j] = 1`
  - First col: `dp[i][0] = 1`
- Answer: `dp[m-1][n-1]`

# Scale 4: Knapsack Problems

State Definition: `dp[i][w]` represents the optimal value considering first i items with weight/capacity constraint w.

Pattern 4.1: 0/1 Knapsack
- State: `dp[i][w]` = max value using first i items with capacity w
- Transition: 
  - If `weight[i-1] > w`: `dp[i][w] = dp[i-1][w]` (skip item)
  - Else: `dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight[i-1]] + value[i-1])`
- Base Case: `dp[0][w] = 0`
- Answer: `dp[n][W]`

Pattern 4.2: Unbounded Knapsack (Coin Change)
- State: `dp[i]` = min coins to make amount i
- Transition: `dp[i] = min(dp[i], dp[i-coin] + 1)` for each coin
- Base Case: `dp[0] = 0, dp[i] = infinity for i > 0`
- Answer: `dp[amount]`

# Scale 5: String/Substring Problems

State Definition: `dp[i][j]` typically represents property of substring from index i to j.

Pattern 5.1: Palindromic Problems
- State: `dp[i][j]` = whether substring s[i...j] is palindrome
- Transition: `dp[i][j] = (s[i] == s[j]) && dp[i+1][j-1]`
- Base Cases: 
  - `dp[i][i] = true` (single char)
  - `dp[i][i+1] = (s[i] == s[i+1])` (two chars)
- Fill Order: Increasing substring length
- Answer: Depends on specific problem (count, longest, etc.)

Pattern 5.2: Distinct Subsequences
- State: `dp[i][j]` = number of ways s1[0...i-1] has s2[0...j-1] as subsequence
- Transition:
  - If `s1[i-1] == s2[j-1]`: `dp[i][j] = dp[i-1][j-1] + dp[i-1][j]`
  - Else: `dp[i][j] = dp[i-1][j]`
- Base Cases: `dp[i][0] = 1, dp[0][j>0] = 0`
- Answer: `dp[m][n]`

# Scale 6: Interval DP

State Definition: `dp[i][j]` represents optimal answer for subproblem from index i to j.

Pattern 6.1: Matrix Chain Multiplication
- State: `dp[i][j]` = min cost to multiply matrices from i to j
- Transition: `dp[i][j] = min(dp[i][k] + dp[k+1][j] + cost_of_multiplying)` for all k between i and j
- Base Case: `dp[i][i] = 0`
- Fill Order: Increasing interval length
- Answer: `dp[0][n-1]`

Pattern 6.2: Burst Balloons
- State: `dp[i][j]` = max coins from bursting all balloons between i and j
- Transition: `dp[i][j] = max(dp[i][k] + dp[k+1][j] + nums[i-1]*nums[k]*nums[j+1])` for all k between i and j
- Base Case: Empty ranges
- Fill Order: Increasing interval length
- Answer: `dp[1][n]`

# Scale 7: State Compression DP

State Definition: `dp[mask][i]` represents optimal answer with state bitmask and ending at/considering position i.

Pattern 7.1: Traveling Salesman
- State: `dp[mask][i]` = shortest path visiting cities in mask and ending at city i
- Transition: `dp[mask][j] = min(dp[mask&~(1<<j)][i] + dist[i][j])` for all i in mask
- Base Case: `dp[1][0] = 0` (just starting city)
- Answer: `min(dp[(1<<n)-1][i] + dist[i][0])` for all i

# Pattern Recognition Guide

When facing a new DP problem, ask these questions to identify which "scale" to use:

1. Are you working with a single sequence or array?
   - Try Linear Sequence DP patterns
   
2. Are you comparing or combining two sequences?
   - Try Two Sequence DP patterns
   
3. Is the problem about traversing a 2D grid?
   - Try Grid DP patterns
   
4. Does the problem involve selecting items with constraints?
   - Try Knapsack patterns
   
5. Are you analyzing properties of substrings?
   - Try String/Substring patterns
   
6. Does the problem involve dividing a sequence and combining results?
   - Try Interval DP patterns
   
7. Does the problem have many binary states or involve permutations?
   - Try State Compression DP

## Practice Strategy

1. Learn one "scale" at a time - Start with Linear DP, master it, then move on
2. Practice standard problems for each pattern first before variations
3. Draw state transition diagrams to visualize the dependencies
4. Verbalize your approach using the universal pattern steps
5. Start with top-down recursive+memo if bottom-up is unclear
6. Create your own examples and trace through the state transitions

Remember: Like guitar scales, DP patterns become natural with practice. Focus on understanding the patterns rather than memorizing specific code.
